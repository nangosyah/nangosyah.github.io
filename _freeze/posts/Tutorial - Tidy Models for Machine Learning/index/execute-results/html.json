{
  "hash": "03d1d80d91a0d654aeeedf77185dc7d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using the Tidy-models suite for Machine Learning\"\nauthor: \"Tom Wellard Nangosyah\"\ndate: \"2024-09-19\"\ncategories: [R,  Data Science, Classification, Machine learning, Data Processing, Tidy-models, Titanic dataset]\nimage: \"tidymodelsApps.png\"\n---\n\n\n\n\n\n# Titanic Dataset\n\n::: callout-note\nThe content of this tutorial is primarily based on the book **\"Tidy Modeling with R\"** by Max Kuhn and Julia Silge (2021). The analysis scheme also follows the approach outlined in the [R Classification with Tidymodels tutorial](https://www.kirenz.com/blog/posts/2021-02-17-r-classification-tidymodels/).\n:::\n\nWe will use the **Titanic dataset** from Kaggle for our analysis, with the goal of building a model to predict which passengers survived the Titanic shipwreck. We will implement a classification workflow using the `tidymodels` package, demonstrating how workflows and recipes can be utilized for effective model building. Our research question is:\n\n**\"What sorts of people were more likely to survive?\"**\n\nTo address this question, we will consider factors such as the number of lifeboats, age, gender, and socio-economic class, based on the Titanic's sinking on April 15, 1912. We will use classification methods to categorize passengers into those who survived and those who did not. Common classification techniques like logistic regression, random forests and K-nearest neighbors will be employed to optimize the solution with minimal error.\n\nFirst, we will load the necessary packages for the analysis:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(bundle)\nlibrary(vetiver)\nlibrary(pins)\nlibrary(readr)\nlibrary(stacks)\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(ggmap)\nlibrary(visdat)\nlibrary(corrr)\nlibrary(ggsignif)\nlibrary(gt)\nlibrary(vip)\nlibrary(themis)\nlibrary(purrr)\nlibrary(keras)\nlibrary(ranger)\nlibrary(xgboost)\nlibrary(kknn)\nlibrary(reticulate)\n```\n:::\n\n\n\n\n\nWe import the data for the analysis\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttest <- read_csv(\"/Users/nangosyah/Documents/Kaggle Data-sets/titanic/test.csv\")\nttrain <- read_csv(\"/Users/nangosyah/Documents/Kaggle Data-sets/titanic/train.csv\")\ntsub <- read_csv(\"/Users/nangosyah/Documents/Kaggle Data-sets/titanic/gender_submission.csv\")\n```\n:::\n\n\n\n\n\n## Format Data\n\nTo gain a preliminary understanding of the dataset, we will perform some exploratory data analysis (EDA). We start by examining a few rows from the dataset to get an initial impression of its structure and contents.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ttrain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 891\nColumns: 12\n$ PassengerId <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ Survived    <dbl> 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1…\n$ Pclass      <dbl> 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, 3…\n$ Name        <chr> \"Braund, Mr. Owen Harris\", \"Cumings, Mrs. John Bradley (Fl…\n$ Sex         <chr> \"male\", \"female\", \"female\", \"female\", \"male\", \"male\", \"mal…\n$ Age         <dbl> 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14, …\n$ SibSp       <dbl> 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, 0…\n$ Parch       <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0…\n$ Ticket      <chr> \"A/5 21171\", \"PC 17599\", \"STON/O2. 3101282\", \"113803\", \"37…\n$ Fare        <dbl> 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625,…\n$ Cabin       <chr> NA, \"C85\", NA, \"C123\", NA, NA, \"E46\", NA, NA, NA, \"G6\", \"C…\n$ Embarked    <chr> \"S\", \"C\", \"S\", \"S\", \"S\", \"Q\", \"S\", \"S\", \"S\", \"C\", \"S\", \"S\"…\n```\n\n\n:::\n:::\n\n\n\n\n\nAt this stage, we will ensure that the data types are correct, particularly for the target variable `Survived`, which should be a factor. Similarly, all categorical variables will be converted to factors. We shall align these data conversions both in out testing set and and training set.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# training set\nttrain$Sex <- as.factor(ttrain$Sex)\nttrain$Survived <- as.factor(ttrain$Survived)\nttrain$Pclass <- as.factor(ttrain$Pclass)\nttrain$Embarked <- as.factor(ttrain$Embarked)\n\n# testing set\nttest$Sex <- as.factor(ttest$Sex)\nttest$Pclass <- as.factor(ttest$Pclass)\nttest$Embarked <- as.factor(ttest$Embarked)\n```\n:::\n\n\n\n\n\n## **Missing data**\n\nAfter applying the transformations, we will now examine the first 5 records to get an initial sense of the data we're working with. This allows us to verify the changes and better understand the dataset structure.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttrain %>%\n  slice_head(n = 5) %>%\n  gt() \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"vsanlknwln\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#vsanlknwln table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#vsanlknwln thead, #vsanlknwln tbody, #vsanlknwln tfoot, #vsanlknwln tr, #vsanlknwln td, #vsanlknwln th {\n  border-style: none;\n}\n\n#vsanlknwln p {\n  margin: 0;\n  padding: 0;\n}\n\n#vsanlknwln .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#vsanlknwln .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vsanlknwln .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vsanlknwln .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vsanlknwln .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vsanlknwln .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vsanlknwln .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vsanlknwln .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vsanlknwln .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#vsanlknwln .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#vsanlknwln .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vsanlknwln .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vsanlknwln .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vsanlknwln .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vsanlknwln .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vsanlknwln .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#vsanlknwln .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#vsanlknwln .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#vsanlknwln .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vsanlknwln .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#vsanlknwln .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vsanlknwln .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#vsanlknwln .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vsanlknwln .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vsanlknwln .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vsanlknwln .gt_left {\n  text-align: left;\n}\n\n#vsanlknwln .gt_center {\n  text-align: center;\n}\n\n#vsanlknwln .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vsanlknwln .gt_font_normal {\n  font-weight: normal;\n}\n\n#vsanlknwln .gt_font_bold {\n  font-weight: bold;\n}\n\n#vsanlknwln .gt_font_italic {\n  font-style: italic;\n}\n\n#vsanlknwln .gt_super {\n  font-size: 65%;\n}\n\n#vsanlknwln .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#vsanlknwln .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#vsanlknwln .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#vsanlknwln .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#vsanlknwln .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#vsanlknwln .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#vsanlknwln .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#vsanlknwln .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#vsanlknwln div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"PassengerId\">PassengerId</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Survived\">Survived</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Pclass\">Pclass</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Name\">Name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sex\">Sex</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Age\">Age</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"SibSp\">SibSp</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Parch\">Parch</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Ticket\">Ticket</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Fare\">Fare</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Cabin\">Cabin</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Embarked\">Embarked</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"PassengerId\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Survived\" class=\"gt_row gt_center\">0</td>\n<td headers=\"Pclass\" class=\"gt_row gt_center\">3</td>\n<td headers=\"Name\" class=\"gt_row gt_left\">Braund, Mr. Owen Harris</td>\n<td headers=\"Sex\" class=\"gt_row gt_center\">male</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">22</td>\n<td headers=\"SibSp\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Parch\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Ticket\" class=\"gt_row gt_left\">A/5 21171</td>\n<td headers=\"Fare\" class=\"gt_row gt_right\">7.2500</td>\n<td headers=\"Cabin\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"Embarked\" class=\"gt_row gt_center\">S</td></tr>\n    <tr><td headers=\"PassengerId\" class=\"gt_row gt_right\">2</td>\n<td headers=\"Survived\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Pclass\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Name\" class=\"gt_row gt_left\">Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>\n<td headers=\"Sex\" class=\"gt_row gt_center\">female</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">38</td>\n<td headers=\"SibSp\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Parch\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Ticket\" class=\"gt_row gt_left\">PC 17599</td>\n<td headers=\"Fare\" class=\"gt_row gt_right\">71.2833</td>\n<td headers=\"Cabin\" class=\"gt_row gt_left\">C85</td>\n<td headers=\"Embarked\" class=\"gt_row gt_center\">C</td></tr>\n    <tr><td headers=\"PassengerId\" class=\"gt_row gt_right\">3</td>\n<td headers=\"Survived\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Pclass\" class=\"gt_row gt_center\">3</td>\n<td headers=\"Name\" class=\"gt_row gt_left\">Heikkinen, Miss. Laina</td>\n<td headers=\"Sex\" class=\"gt_row gt_center\">female</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">26</td>\n<td headers=\"SibSp\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Parch\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Ticket\" class=\"gt_row gt_left\">STON/O2. 3101282</td>\n<td headers=\"Fare\" class=\"gt_row gt_right\">7.9250</td>\n<td headers=\"Cabin\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"Embarked\" class=\"gt_row gt_center\">S</td></tr>\n    <tr><td headers=\"PassengerId\" class=\"gt_row gt_right\">4</td>\n<td headers=\"Survived\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Pclass\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Name\" class=\"gt_row gt_left\">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n<td headers=\"Sex\" class=\"gt_row gt_center\">female</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">35</td>\n<td headers=\"SibSp\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Parch\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Ticket\" class=\"gt_row gt_left\">113803</td>\n<td headers=\"Fare\" class=\"gt_row gt_right\">53.1000</td>\n<td headers=\"Cabin\" class=\"gt_row gt_left\">C123</td>\n<td headers=\"Embarked\" class=\"gt_row gt_center\">S</td></tr>\n    <tr><td headers=\"PassengerId\" class=\"gt_row gt_right\">5</td>\n<td headers=\"Survived\" class=\"gt_row gt_center\">0</td>\n<td headers=\"Pclass\" class=\"gt_row gt_center\">3</td>\n<td headers=\"Name\" class=\"gt_row gt_left\">Allen, Mr. William Henry</td>\n<td headers=\"Sex\" class=\"gt_row gt_center\">male</td>\n<td headers=\"Age\" class=\"gt_row gt_right\">35</td>\n<td headers=\"SibSp\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Parch\" class=\"gt_row gt_right\">0</td>\n<td headers=\"Ticket\" class=\"gt_row gt_left\">373450</td>\n<td headers=\"Fare\" class=\"gt_row gt_right\">8.0500</td>\n<td headers=\"Cabin\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"Embarked\" class=\"gt_row gt_center\">S</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\nFrom the data, we observe the presence of `NA` values in the `Cabin` and `Age` columns. We will propose methods to handle these missing values in later stages. For now, we will proceed to visualize the data structure to gain insights into its distribution and patterns.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_dat(ttrain)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe data format appears to be in good shape after the adjustments made, aside from the missing data (`NA`s) that still need attention. To assess the extent of missingness, we will now examine the percentage of missing values across the dataset. For this task, we will use functions from the `visdat` package to visualize and quantify missingness.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_miss(ttrain, sort_miss = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\nAn alternative method to the same thing could be with the is.na function from base R which can be achieved as below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(ttrain) %>% colSums()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPassengerId    Survived      Pclass        Name         Sex         Age \n          0           0           0           0           0         177 \n      SibSp       Parch      Ticket        Fare       Cabin    Embarked \n          0           0           0           0         687           2 \n```\n\n\n:::\n:::\n\n\n\n\n\nThe dataset has significant missingness, with 77% missing values for the `Cabin` variable and 20% missing for `Age`. This level of missing data can cause issues, particularly for models that don't handle missingness directly. These missing values will be addressed in later stages to ensure model robustness and accuracy.\n\n## Create Variables\n\nTo enhance model learning capabilities, we created a new feature: the mean age per class (`age_perclass`). This feature represents the average age of passengers within each `Pclass`, providing insight into the typical age distribution by class. Additionally, we used these class-specific means to impute missing values in the `Age` variable, ensuring that missing ages were replaced with the average age of passengers in the same class.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttrain <- ttrain %>%\n  group_by(Pclass) %>%\n  mutate(age_perclass = mean(Age, na.rm = TRUE)) %>%\n  ungroup() %>%\n  mutate(Age = ifelse(is.na(Age), age_perclass, Age))\n```\n:::\n\n\n\n\n\n## Data Overview\n\nWe will now review the data overview following the manipulations using the `skimr` package. This package provides a detailed summary of the dataset, including data types, missing values, and summary statistics. Here’s how we’ll proceed:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(ttrain)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |       |\n|:------------------------|:------|\n|Name                     |ttrain |\n|Number of rows           |891    |\n|Number of columns        |13     |\n|_______________________  |       |\n|Column type frequency:   |       |\n|character                |3      |\n|factor                   |4      |\n|numeric                  |6      |\n|________________________ |       |\n|Group variables          |None   |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Name          |         0|          1.00|  12|  82|     0|      891|          0|\n|Ticket        |         0|          1.00|   3|  18|     0|      681|          0|\n|Cabin         |       687|          0.23|   1|  15|     0|      147|          0|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts             |\n|:-------------|---------:|-------------:|:-------|--------:|:----------------------|\n|Survived      |         0|             1|FALSE   |        2|0: 549, 1: 342         |\n|Pclass        |         0|             1|FALSE   |        3|3: 491, 1: 216, 2: 184 |\n|Sex           |         0|             1|FALSE   |        2|mal: 577, fem: 314     |\n|Embarked      |         2|             1|FALSE   |        3|S: 644, C: 168, Q: 77  |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd|    p0|    p25|    p50|    p75|   p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|-----:|------:|------:|------:|------:|:-----|\n|PassengerId   |         0|             1| 446.00| 257.35|  1.00| 223.50| 446.00| 668.50| 891.00|▇▇▇▇▇ |\n|Age           |         0|             1|  29.29|  13.21|  0.42|  22.00|  26.00|  37.00|  80.00|▂▇▃▁▁ |\n|SibSp         |         0|             1|   0.52|   1.10|  0.00|   0.00|   0.00|   1.00|   8.00|▇▁▁▁▁ |\n|Parch         |         0|             1|   0.38|   0.81|  0.00|   0.00|   0.00|   0.00|   6.00|▇▁▁▁▁ |\n|Fare          |         0|             1|  32.20|  49.69|  0.00|   7.91|  14.45|  31.00| 512.33|▇▁▁▁▁ |\n|age_perclass  |         0|             1|  29.29|   5.38| 25.14|  25.14|  25.14|  29.88|  38.23|▇▃▁▁▃ |\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Data Splitting\n\nIn machine learning, we typically divide the data into a training set and a testing set. The training set is used to fit the models, while the testing set is used to evaluate their performance. To ensure that the training set is representative of the overall dataset, we must correctly partition the initial dataset.\n\nWe will use a histogram to visualize the distribution of the dependent variable, `Survived`, in our data split.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttrain %>%\n  ggplot(aes(Survived)) +\n  geom_bar() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\nTo perform the split, we will use the `rsample` package from the `tidymodels` suite. This package helps create an object containing information about the split. We will then use the `training()` and `testing()` functions to generate the training and test sets.\n\nHere’s how to do it:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n# split 3/4 of the data into the training set \ndata_split <- initial_split(ttrain, \n                           prop = 3/4, \n                           strata = Survived)\n\n# two sets\ndata_train <- training(data_split)\ndata_test <- testing(data_split)\n```\n:::\n\n\n\n\n\n## Data Exploration\n\nWe will explore the training data to gain insights and identify which variables are important for modeling. This process is iterative: we may build a prototype model, analyze the results, and refine the model based on new insights from exploration.\n\nThis exploration and modeling will be conducted exclusively with the training set. We shall create a copy of the training set so that we don't alter the data during our exploration phase.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore <- data_train\n```\n:::\n\n\n\n\n\nWe will now use the training dataset to explore relationships between predictor variables and the outcome variable, `Survived`. This exploration will help us identify which variables are most relevant for predicting passenger survival.\n\n### Numerical Variables\n\nWe will examine the numerical variables to check fro differences between passengers who survived and those who did not. This will help us understand how these variables vary with survival status.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore %>%\n  ggplot(aes(x = Survived, y = Age, \n             fill = Survived, color = Survived)) +\n  geom_boxplot(alpha=0.4) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\nFrom the exploratory data analysis (EDA), we observe that:\n\n-   Some numerical variables are on different scales.\n\n-   Several variables exhibit heavy tails and some show bi-modal distributions.\n\nTo prepare the data for modeling, we need to transform these variables to approximate a normal distribution. This will help improve model performance.\n\nWe will use the variables `Age`, `SibSp`, `Parch`, and `Fare` as predictors in our model.\n\n### Categorical Variables\n\nWe go ahead analyse the categorical variables in relation with the dependent variable Survived. We output tables giving us an idea of the grouping in the data.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"wyovphiuwp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#wyovphiuwp table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#wyovphiuwp thead, #wyovphiuwp tbody, #wyovphiuwp tfoot, #wyovphiuwp tr, #wyovphiuwp td, #wyovphiuwp th {\n  border-style: none;\n}\n\n#wyovphiuwp p {\n  margin: 0;\n  padding: 0;\n}\n\n#wyovphiuwp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#wyovphiuwp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wyovphiuwp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wyovphiuwp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wyovphiuwp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wyovphiuwp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wyovphiuwp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wyovphiuwp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wyovphiuwp .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#wyovphiuwp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#wyovphiuwp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wyovphiuwp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wyovphiuwp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wyovphiuwp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wyovphiuwp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wyovphiuwp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#wyovphiuwp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#wyovphiuwp .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#wyovphiuwp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wyovphiuwp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#wyovphiuwp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wyovphiuwp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wyovphiuwp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wyovphiuwp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wyovphiuwp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wyovphiuwp .gt_left {\n  text-align: left;\n}\n\n#wyovphiuwp .gt_center {\n  text-align: center;\n}\n\n#wyovphiuwp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wyovphiuwp .gt_font_normal {\n  font-weight: normal;\n}\n\n#wyovphiuwp .gt_font_bold {\n  font-weight: bold;\n}\n\n#wyovphiuwp .gt_font_italic {\n  font-style: italic;\n}\n\n#wyovphiuwp .gt_super {\n  font-size: 65%;\n}\n\n#wyovphiuwp .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#wyovphiuwp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#wyovphiuwp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#wyovphiuwp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#wyovphiuwp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#wyovphiuwp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#wyovphiuwp .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#wyovphiuwp .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#wyovphiuwp div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style>Titanic Survivors</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>0 - Died 1 - Survived</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sex\">Sex</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">Districts</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"percent\">Percent</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"3\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"0\">0</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"0  Sex\" class=\"gt_row gt_center\">female</td>\n<td headers=\"0  n\" class=\"gt_row gt_right\">59.00</td>\n<td headers=\"0  percent\" class=\"gt_row gt_right\">14.36</td></tr>\n    <tr><td headers=\"0  Sex\" class=\"gt_row gt_center\">male</td>\n<td headers=\"0  n\" class=\"gt_row gt_right\">352.00</td>\n<td headers=\"0  percent\" class=\"gt_row gt_right\">85.64</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"3\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"1\">1</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"1  Sex\" class=\"gt_row gt_center\">female</td>\n<td headers=\"1  n\" class=\"gt_row gt_right\">176.00</td>\n<td headers=\"1  percent\" class=\"gt_row gt_right\">68.75</td></tr>\n    <tr><td headers=\"1  Sex\" class=\"gt_row gt_center\">male</td>\n<td headers=\"1  n\" class=\"gt_row gt_right\">80.00</td>\n<td headers=\"1  percent\" class=\"gt_row gt_right\">31.25</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore %>%\n  ggplot(aes(Survived, Sex)) +\n  geom_bin2d() +\n  scale_fill_continuous(type = \"viridis\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFrom the plot, we observe that the majority of passengers who died are male, highlighted in yellow, compared to females. Additionally, a higher proportion of survivors are female. We will also examine if the socio-economic status, indicated by the cabin class, can help distinguish between those who survived and those who did not.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore %>%\n  ggplot(aes(Survived, Pclass)) +\n  geom_bin2d() +\n  scale_fill_continuous(type = \"viridis\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe plot shows that the majority of passengers who died were from the lowest socio-economic class, with Class 3 having the highest number of deaths compared to Classes 1 and 2.\n\nTherefore, we will include all categorical variables `Pclass`, `Sex`, and `Embarked`—as predictors in our model.\n\n## Data Preparation\n\nTo prepare our data for modeling, we will:\n\n1.  Handle missing values.\n\n2.  Address and remove outliers.\n\n3.  Perform feature selection.\n\n4.  Engineer new features.\n\n5.  Scale variables.\n\n6.  Create a validation set.\n\nWe will use the `tidymodels` suite, specifically the `recipes` and `workflows` packages, for these steps.\n\n-   `recipes` are used for data processing, including:\n\n    -   **Data cleaning**: Fix or remove outliers, fill in missing values, or drop rows/columns with excessive missing data.\n\n    -   **Feature selection**: Remove attributes that do not provide useful information.\n\n    -   **Feature scaling**: Standardize or normalize features.\n\n    -   **Feature engineering**: Discretize continuous features, decompose features (e.g., extract weekday from a date), apply transformations and aggregate features into new, meaningful features.\n\nThe `recipes` package allows us to create reusable objects for data preprocessing that can be applied consistently throughout the modeling process. In the `tidymodels` framework, this is typically integrated with the `workflows` package, which combines the preprocessed data (from the recipe) with the chosen model, streamlining the modeling process and ensuring that the same preprocessing steps are applied during both training and evaluation.\n\nNow to prepare our data from modeling we shall select the variables we shall use in our model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelttrain <-\n  data_train %>%\n  select(\n    PassengerId, Survived, Age, Sex, \n    Pclass, SibSp, Parch,Fare, Embarked)\n\nglimpse(modelttrain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 667\nColumns: 9\n$ PassengerId <dbl> 6, 7, 8, 13, 14, 15, 19, 21, 25, 27, 28, 31, 36, 38, 41, 4…\n$ Survived    <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Age         <dbl> 25.14062, 54.00000, 2.00000, 20.00000, 39.00000, 14.00000,…\n$ Sex         <fct> male, male, male, male, male, female, female, male, female…\n$ Pclass      <fct> 3, 1, 3, 3, 3, 3, 3, 2, 3, 3, 1, 1, 1, 3, 3, 2, 3, 3, 3, 3…\n$ SibSp       <dbl> 0, 0, 3, 0, 1, 0, 1, 0, 3, 0, 3, 0, 1, 0, 1, 1, 0, 0, 1, 2…\n$ Parch       <dbl> 0, 0, 1, 0, 5, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Fare        <dbl> 8.4583, 51.8625, 21.0750, 8.0500, 31.2750, 7.8542, 18.0000…\n$ Embarked    <fct> Q, S, S, S, S, S, S, S, S, C, S, C, S, S, S, S, C, S, Q, C…\n```\n\n\n:::\n:::\n\n\n\n\n\nNow that we have our final selected variables for modeling we shall do the initial data split again since we updated the original data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ndata_split <- initial_split(modelttrain,\n                           prop = 3/4, \n                           strata = Survived)\n\ndata_train <- training(data_split) \ndata_test <- testing(data_split)\n```\n:::\n\n\n\n\n\nWith our new data split, we can now create a recipe for data preprocessing. For detailed guidance on various preprocessing techniques, refer to <https://www.tmwr.org/pre-proc-table.html>. Below is the code to create our recipe:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelttrain_recipe <-\n  recipe(Survived ~ .,data = modelttrain) %>%\n  update_role(PassengerId, new_role = \"ID\") %>%\n  step_log(Parch,SibSp,Fare) %>%\n  step_naomit(everything(), skip = TRUE) %>%\n  step_novel(all_nominal(), -all_outcomes()) %>%\n  step_normalize(all_numeric(), -all_outcomes(), \n                 -PassengerId) %>%\n  step_zv(all_numeric(), -all_outcomes()) %>%\n  step_corr(all_numeric(), threshold = 0.7, method = \"spearman\") \n```\n:::\n\n\n\n\n\nThe `modelttrain_recipe` is designed to preprocess the data for modeling a detailed breakdown of each step is given below:\n\n-   First, we define the recipe with `recipe(Survived ~ ., data = modelttrain)`, specifying `Survived` as the outcome variable and all other columns as predictors using the `modelttrain` dataset.\n\n-   Next, we use `update_role(PassengerId, new_role = \"ID\")` to use `PassengerId` as an identifier rather than a predictor. This allows us to keep track of individual records without including `PassengerId` in the model.\n\n-   We then apply `step_log(Parch, SibSp, Fare, Age)` to log-transform the skewed numerical variables. This step addresses the skewness in the distributions but note that it can cause issues with negative values.\n\n-   To handle missing values, we use `step_naomit(everything(), skip = TRUE)`, which removes rows with `NA` or `NaN` values. The `skip = TRUE` argument ensures that this step is not applied to new data during model assessment, thus preserving the number of samples.\n\n-   The `step_novel(all_nominal(), -all_outcomes())` step converts nominal variables to factors and handles any new levels not seen during training. This ensures that all categorical variables are appropriately processed.\n\n-   We standardize numeric variables using `step_normalize(all_numeric(), -all_outcomes(), -PassengerId)`, which scales predictors to have a mean of zero and a standard deviation of one.\n\n-   We also remove variables with zero variance using `step_zv(all_numeric(), -all_outcomes())`, as these variables do not provide useful information for modeling.\n\n-   Finally, `step_corr(all_predictors(), threshold = 0.7, method = \"spearman\")` removes predictors that have high correlations (greater than 0.7) with other predictors, this cab reduce problems related to multicollinearity.\n\nOur new data after preprocessing now looks as below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(modelttrain_recipe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  variable    type      role      source  \n  <chr>       <list>    <chr>     <chr>   \n1 PassengerId <chr [2]> ID        original\n2 Age         <chr [2]> predictor original\n3 Sex         <chr [3]> predictor original\n4 Pclass      <chr [3]> predictor original\n5 SibSp       <chr [2]> predictor original\n6 Parch       <chr [2]> predictor original\n7 Fare        <chr [2]> predictor original\n8 Embarked    <chr [3]> predictor original\n9 Survived    <chr [3]> outcome   original\n```\n\n\n:::\n:::\n\n\n\n\n\nTo verify that our recipe has been applied correctly, we can use the `prep()` and `juice()` functions. The `prep()` function prepares the recipe based on the training data, and the `juice()` function extracts the processed data to inspect the results.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_data <- \n  modelttrain_recipe %>% \n  prep() %>% \n  juice() \n\nglimpse(model_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 665\nColumns: 6\n$ PassengerId <dbl> 6, 7, 8, 13, 14, 15, 19, 21, 25, 27, 28, 31, 36, 38, 41, 4…\n$ Age         <dbl> -0.3073507, 1.8760623, -2.0580997, -0.6962744, 0.7412079, …\n$ Sex         <fct> male, male, male, male, male, female, female, male, female…\n$ Pclass      <fct> 3, 1, 3, 3, 3, 3, 3, 2, 3, 3, 1, 1, 1, 3, 3, 2, 3, 3, 3, 3…\n$ Embarked    <fct> Q, S, S, S, S, S, S, S, S, C, S, C, S, S, S, S, C, S, Q, C…\n$ Survived    <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n\n\n:::\n:::\n\n\n\n\n\n## Validation Set\n\nWe will now create a validation set that will be used for hyper-parameter tuning during model training. To achieve this, we apply k-fold cross-validation, which helps in splitting the data into multiple folds for more robust evaluation. We will use the `vfold_cv()` function to generate a set of validation folds.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(145)\n\ncv_folds <-\n vfold_cv(modelttrain, \n          v = 5, \n          strata = Survived) \n```\n:::\n\n\n\n\n\n## Model building\n\nIn the model-building process using the tidy-models framework, we follow a structured approach. We begin by selecting the model type, then specify the engine to be used, and finally define the mode, either regression or classification based on the task at hand. We shall specify different models to be used.\n\n### Logistic Regression\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_spec <- \n  logistic_reg() %>%\n  set_engine(engine = \"glm\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\n\n\n\n### Random Forest\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- \n  rand_forest() %>%\n  set_engine(\"ranger\", importance = \"impurity\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\n\n\n\n### K-Nearest Neighbor\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_spec <- \n  nearest_neighbor(neighbors = 4) %>% \n  set_engine(\"kknn\") %>%\n  set_mode(\"classification\") \n```\n:::\n\n\n\n\n\n# Create Workflows\n\nNext, we create a workflow to integrate the recipe we previously developed into our modeling process. A workflow is an object that brings together both the recipe and the modeling step for seamless execution.\n\nWe now bundle the recipe with the earlier stated models:\n\n### Logistic Regression\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_wflow <- \n workflow() %>%\n add_recipe(modelttrain_recipe) %>%\n add_model(log_spec)\n```\n:::\n\n\n\n\n\n### Random Forest\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_wflow <-\n workflow() %>%\n add_recipe(modelttrain_recipe) %>%\n add_model(rf_spec) \n```\n:::\n\n\n\n\n\n### K-Nearest Neighbor\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_wflow <-\n workflow() %>%\n add_recipe(modelttrain_recipe) %>%\n add_model(knn_spec)\n```\n:::\n\n\n\n\n\n# Evaluate Models\n\nTo evaluate our models, we will use the validation set (`cv_folds`) to estimate model performance. We will apply the `fit_resamples()` function to fit the models on each fold and store the results. In order to save predictions from the model and visualise the model fit and residuals we shall use `control_resamples(save_pred = TRUE)` and finally use the `collect_metrics()` function to pick the model that does best on the validation set.\n\nWe shall use our workflow object to now perform resampling and use `metric_set()`from the `yardstick` package to choose common performance metrics.\n\n### Logistic Regression\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res <- \n  log_wflow %>%\n  fit_resamples(\n    resamples = cv_folds, \n    metrics = metric_set(\n      recall, precision, f_meas, \n      accuracy, kap,\n      roc_auc, sens, spec),\n    control = control_resamples(\n      save_pred = TRUE)\n    ) \n```\n:::\n\n\n\n\n\n#### Performance Metrics\n\nFrom the fitted models we show the performance over all folds below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>% collect_metrics(summarize = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 6\n  .metric   .estimator  mean     n std_err .config             \n  <chr>     <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy  binary     0.794     5  0.0135 Preprocessor1_Model1\n2 f_meas    binary     0.837     5  0.0108 Preprocessor1_Model1\n3 kap       binary     0.557     5  0.0292 Preprocessor1_Model1\n4 precision binary     0.819     5  0.0119 Preprocessor1_Model1\n5 recall    binary     0.856     5  0.0136 Preprocessor1_Model1\n6 roc_auc   binary     0.837     5  0.0152 Preprocessor1_Model1\n7 sens      binary     0.856     5  0.0136 Preprocessor1_Model1\n8 spec      binary     0.693     5  0.0221 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\nWe also show performance for every single fold:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>% collect_metrics(summarize = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 5\n   id    .metric   .estimator .estimate .config             \n   <chr> <chr>     <chr>          <dbl> <chr>               \n 1 Fold1 recall    binary         0.855 Preprocessor1_Model1\n 2 Fold1 precision binary         0.798 Preprocessor1_Model1\n 3 Fold1 f_meas    binary         0.826 Preprocessor1_Model1\n 4 Fold1 accuracy  binary         0.776 Preprocessor1_Model1\n 5 Fold1 kap       binary         0.514 Preprocessor1_Model1\n 6 Fold1 sens      binary         0.855 Preprocessor1_Model1\n 7 Fold1 spec      binary         0.647 Preprocessor1_Model1\n 8 Fold1 roc_auc   binary         0.861 Preprocessor1_Model1\n 9 Fold2 recall    binary         0.854 Preprocessor1_Model1\n10 Fold2 precision binary         0.854 Preprocessor1_Model1\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Collect predictions\n\nTo collect predictions from the model we use the `collect_predictions` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred <- \n  log_res %>%\n  collect_predictions()\n```\n:::\n\n\n\n\n\n#### Confusion Matrix\n\nWe also create a *confusion matrix* using `conf_mat()` function, and heat-maps can also be used to visualise the same results.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>%\n  conf_mat(Survived, .pred_class) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction   0   1\n         0 352  78\n         1  59 176\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>%\n  conf_mat(Survived, .pred_class) %>%\n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### ROC Curve\n\nReceiver Operator Curves are used in classification problems to show performance for given models, in the classification process, using the `roc_curve()` function with the relevant class probability `.pred_above` we can be able to achieve a ROC-Curve showing the performance of each fold.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>%\n  group_by(id) %>%\n  roc_curve(Survived, .pred_0) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Probability Distributions\n\nWe can also visualise the predicted probabilities for the two classes.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n\nNext, we will apply the same process to all the models mentioned earlier, but we will focus solely on evaluating their performance by comparing the relevant metrics.\n\n### Random Forest\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 6\n  .metric   .estimator  mean     n std_err .config             \n  <chr>     <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy  binary     0.802     5 0.00992 Preprocessor1_Model1\n2 f_meas    binary     0.851     5 0.00926 Preprocessor1_Model1\n3 kap       binary     0.561     5 0.0187  Preprocessor1_Model1\n4 precision binary     0.794     5 0.00297 Preprocessor1_Model1\n5 recall    binary     0.917     5 0.0198  Preprocessor1_Model1\n6 roc_auc   binary     0.843     5 0.0172  Preprocessor1_Model1\n7 sens      binary     0.917     5 0.0198  Preprocessor1_Model1\n8 spec      binary     0.617     5 0.00981 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n### K-Nearest Neighbor\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 6\n  .metric   .estimator  mean     n std_err .config             \n  <chr>     <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy  binary     0.774     3 0.00434 Preprocessor1_Model1\n2 f_meas    binary     0.829     3 0.00794 Preprocessor1_Model1\n3 kap       binary     0.501     3 0.00779 Preprocessor1_Model1\n4 precision binary     0.778     3 0.0144  Preprocessor1_Model1\n5 recall    binary     0.890     3 0.0373  Preprocessor1_Model1\n6 roc_auc   binary     0.812     3 0.0129  Preprocessor1_Model1\n7 sens      binary     0.890     3 0.0373  Preprocessor1_Model1\n8 spec      binary     0.588     3 0.0519  Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\n## Compare Models\n\nWe now extract the performance metrics from all the fitted models for comparison.\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot metrics\nggplot(mean_metrics, aes(x = model, y = estimate_value, fill = .metric)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~.metric, scales = \"free_y\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.title.y = element_blank()) +\n  geom_text(aes(label = sprintf(\"%.2f\", estimate_value)), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5, \n            size = 3) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe performance across the models is quite similar, with Random Forest performing slightly better. We will now evaluate the final model on the test set.\n\nTo accomplish this, the `last_fit()` function from the `tidymodels` package can be used. This function fits the model to the entire training dataset and evaluates it on the test set. You'll need to provide the `last_fit()` function with the workflow object of the best model and the data split object (excluding the training data). This will allow us to obtain the performance metrics for the final model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit_rf <- last_fit(rf_wflow, \n                        split = data_split,\n                        metrics = metric_set(\n                          recall, precision, f_meas, \n                          accuracy, kap,\n                          roc_auc, sens, spec)\n                        )\n```\n:::\n\n\n\n\n\nTo display the performance metrics, we will use the `collect_metrics()` function as previously done.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit_rf %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  .metric   .estimator .estimate .config             \n  <chr>     <chr>          <dbl> <chr>               \n1 recall    binary         0.903 Preprocessor1_Model1\n2 precision binary         0.769 Preprocessor1_Model1\n3 f_meas    binary         0.830 Preprocessor1_Model1\n4 accuracy  binary         0.772 Preprocessor1_Model1\n5 kap       binary         0.492 Preprocessor1_Model1\n6 sens      binary         0.903 Preprocessor1_Model1\n7 spec      binary         0.562 Preprocessor1_Model1\n8 roc_auc   binary         0.789 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n\nBased on our results we have a `roc_auc` of 0.7924757 which is generally considered a good performance although we could do better. This means our model has a high ability of finding true positive results than false positives.\n\nBased on our results, we should also examine variable importance to identify the key features influencing the classification.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit_rf %>%\n  pluck(\".workflow\", 1) %>%  \n  extract_fit_parsnip() %>%\n  vip(num_features = 10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFrom the model we see the two most important predictors for our models is Sex and Age of the passenger.\n\nWe now take a look at the confusion matrix for the final model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit_rf %>%\n  collect_predictions() |>\n  conf_mat(Survived, .pred_class) |>\n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe shall also create an ROC Curve for the final model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit_rf |>\n  collect_predictions() |>\n  roc_curve(Survived, .pred_0) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n\n\nGiven that the validation and test set performances are similar, we conclude that the Random Forest model with the selected hyperparameters is the best choice for predicting Survival on the Titanic.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_predictions <- last_fit_rf %>%\n  collect_predictions()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impute missing values in the test set\nttest <- ttest %>%\n  group_by(Pclass) %>%\n  mutate(Age = mean(Age, na.rm = TRUE)) %>%\n  ungroup() %>%\n  mutate(Age = ifelse(is.na(Age), Age, Age))\n\n# extract fitted workflow\nfinal_workflow <- extract_workflow(last_fit_rf)\n\n# workflow for predictions\nrf_predictions <- predict(final_workflow, ttest) %>%\n  bind_cols(ttest %>% select(PassengerId))\n\n# reorder table\nrf_predictions <- rf_predictions %>%\n  select(PassengerId, everything()) %>% \n  rename(PassengerId = PassengerId, Survived = .pred_class)\n```\n:::\n\n\n\n\n\nTo evaluate our model's performance on the provided test set, we generated predictions using the final model and submitted them to Kaggle, achieving a Public Score of 0.77751.\n\n![](/kagglesubmission.png)\n\nThis result, achieved with minimal feature engineering as demonstrated in the tutorial, indicates a somewhat good performance. However, there is potential for further improvement.\n\nBy incorporating additional feature engineering and exploring more advanced techniques, one could enhance the model's accuracy.\n\nFurther feature extraction and refinement are recommended for those looking to achieve even better results for this model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# submission file\nwrite_csv(rf_predictions, \"submissionfile.csv\")\n```\n:::\n\n\n\n\n\nTo conclude this tutorial, the data used in this project comes from the Kaggle **Titanic - Machine Learning from Disaster** competition. You can access and download the dataset by visiting the following [Kaggle page](https://www.kaggle.com/c/titanic/data).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}